from typing import overload, Any, Optional, Text, Tuple, Union

import wx

class Image(wx.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int, clear: bool = True) -> None: ...
    @overload
    def __init__(self, sz: wx.Size, clear: bool = True) -> None: ...
    @overload
    def __init__(self, name: wx._WxNameType, type: wx.BitmapType = wx.BITMAP_TYPE_ANY, index: int = -1) -> None: ...
    # wx.BITMAP_TYPE_BMP: Load a Windows bitmap file.
    # wx.BITMAP_TYPE_GIF: Load a GIF bitmap file.
    # wx.BITMAP_TYPE_JPEG: Load a JPEG bitmap file.
    # wx.BITMAP_TYPE_PNG: Load a PNG bitmap file.
    # wx.BITMAP_TYPE_PCX: Load a PCX bitmap file.
    # wx.BITMAP_TYPE_PNM: Load a PNM bitmap file.
    # wx.BITMAP_TYPE_TIFF: Load a TIFF bitmap file.
    # wx.BITMAP_TYPE_TGA: Load a TGA bitmap file.
    # wx.BITMAP_TYPE_XPM: Load a XPM bitmap file.
    # wx.BITMAP_TYPE_ICO: Load a Windows icon file(ICO).
    # wx.BITMAP_TYPE_CUR: Load a Windows cursor file(CUR).
    # wx.BITMAP_TYPE_ANI: Load a Windows animated cursor file(ANI).
    # wx.BITMAP_TYPE_ANY: Will try to autodetect the format.

    @overload
    def __init__(self, name: wx._WxNameType, mimetype: wx._WxNameType, index: int = -1) -> None: ...
    @overload
    def __init__(self, stream: wx.InputStream, type: wx.BitmapType = wx.BITMAP_TYPE_ANY, index: int = -1) -> None: ...
    @overload
    def __init__(self, stream: wx.InputStream, mimetype: wx._WxNameType, index: int = -1) -> None: ...
    @overload
    def __init__(self, width, height, data) -> None: ...
    @overload
    def __init__(self, width, height, data, alpha) -> None: ...
    @overload
    def __init__(self, size, data) -> None: ...
    @overload
    def __init__(self, size, data, alpha) -> None: ...


    @staticmethod
    def AddHandler(handler: wx.ImageHandler) -> wx.Unknown: ...
    def AdjustChannels(self, factor_red, factor_green, factor_blue, factor_alpha=1.0) -> Image: ...
    def Blur(self, blurRadius: int) -> Image: ...
    def BlurHorizontal(self, blurRadius: int) -> Image: ...
    def BlurVertical(self, blurRadius: int) -> Image: ...

    @overload
    def CanRead(filename: wx._WxNameType) -> bool: ...
    @overload
    def CanRead(stream: wx.InputStream) -> bool: ...

    @staticmethod
    def CleanUpHandlers() -> wx.Unknown: ...
    def Clear(self,  value: int = 0) -> wx.Unknown: ...
    def ClearAlpha(self) -> wx.Unknown: ...
    def ComputeHistogram(self, histogram: ImageHistogram) -> int: ...

    @overload
    def ConvertAlphaToMask(self,  threshold: int = IMAGE_ALPHA_THRESHOLD) -> bool: ...
    @overload
    def ConvertAlphaToMask(self, mr: int, mg: int, mb: int, threshold: int = wx.IMAGE_ALPHA_THRESHOLD) -> bool: ...

    def ConvertToBitmap(self, depth=-1) -> wx.Unknown: ...
    def ConvertToDisabled(self,  brightness: int = 255) -> Image: ...

    @overload
    def ConvertToGreyscale(self, weight_r: float, weight_g: float, weight_b: float) -> Image: ...
    @overload
    def ConvertToGreyscale(self) -> Image: ...

    def ConvertToMono(self, r: int, g: int, b: int) -> Image: ...
    def ConvertToMonoBitmap(self, red, green, blue) -> wx.Unknown: ...
    def Copy(self) -> Image: ...

    @overload
    def Create(self, width: int, height: int, clear: bool = True) -> bool: ...
    @overload
    def Create(self, sz: wx.Size, clear: bool) -> bool: ...
    @overload
    def Create(self, width, height, data) -> bool: ...
    @overload
    def Create(self, width, height, data, alpha) -> bool: ...
    @overload
    def Create(self, size, data) -> bool: ...
    @overload
    def Create(self, size, data, alpha) -> bool: ...

    def Destroy(self) -> wx.Unknown: ...

    # TODO: Suspect that the(R, G, B) tuple that gets returned are ints; make sure they are and tighten up this stub's return value.
    def FindFirstUnusedColour(self, startR: int = 1, startG: int = 0, startB: int = 0) -> Tuple[Any, Any, Any]: ...

    @overload
    @staticmethod
    def FindHandler(name: wx._WxNameType) -> Union[None, wx.ImageHandler]: ...
    @overload
    @staticmethod
    def FindHandler(extension: Text, imageType: wx.BitmapType) -> Union[None, wx.ImageHandler]: ...
    @overload
    @staticmethod
    def FindHandler(imageType: wx.BitmapType) -> Union[None, wx.ImageHandler]: ...

    @staticmethod
    def FindHandlerMime(mimetype: Text) -> Union[None, wx.ImageHandler]: ...

    def GetAlpha(self, x: int, y: int) -> int: ...
    def GetAlpha(self) ->  wx._WxPyObjectType: ...
    def GetAlphaBuffer(self) ->  wx._WxPyObjectType: ...
    def GetBlue(self, x: int, y: int) -> int: ...
    def GetData(self) ->  wx._WxPyObjectType: ...
    def GetDataBuffer(self) ->  wx._WxPyObjectType: ...
    def GetGreen(self, x: int, y: int) -> int: ...
    def GetHeight(self) ->  int: ...

    # @staticmethod
    # GetImageCount(*args, **kw)
    #
    # If the image file contains more than one image and the image handler is capable of retrieving these individually, this function will return the number of available images.
    #
    # For the overload taking the parameter filename, that’s the name of the file to query. For the overload taking the parameter stream, that’s the opened input stream with image data.
    #
    # See wx.ImageHandler.GetImageCount for more info.
    #
    # The parameter type may be one of the following values:
    #
    # wx.BITMAP_TYPE_BMP: Load a Windows bitmap file.
    # wx.BITMAP_TYPE_GIF: Load a GIF bitmap file.
    # wx.BITMAP_TYPE_JPEG: Load a JPEG bitmap file.
    # wx.BITMAP_TYPE_PNG: Load a PNG bitmap file.
    # wx.BITMAP_TYPE_PCX: Load a PCX bitmap file.
    # wx.BITMAP_TYPE_PNM: Load a PNM bitmap file.
    # wx.BITMAP_TYPE_TIFF: Load a TIFF bitmap file.
    # wx.BITMAP_TYPE_TGA: Load a TGA bitmap file.
    # wx.BITMAP_TYPE_XPM: Load a XPM bitmap file.
    # wx.BITMAP_TYPE_ICO: Load a Windows icon file(ICO).
    # wx.BITMAP_TYPE_CUR: Load a Windows cursor file(CUR).
    # wx.BITMAP_TYPE_ANI: Load a Windows animated cursor file(ANI).
    # wx.BITMAP_TYPE_ANY: Will try to autodetect the format.
    #
    # Returns: Number of available images. For most image handlers, this is 1(exceptions are TIFF and ICO formats as well as animated GIFs for which this function returns the number of frames in the animation).
    #
    # overload Overloaded Implementations:

    @overload
    @staticmethod
    def GetImageCount(filename: Text, type: wx.BitmapType = wx.BITMAP_TYPE_ANY) -> int: ...
    @overload
    @staticmethod
    def GetImageCount(stream: wx.InputStream, type: wx.BitmapType = wx.BITMAP_TYPE_ANY) -> int: ...

    @staticmethod
    def GetImageExtWildcard() -> Text: ...
    def GetMaskBlue(self) ->  int: ...
    def GetMaskGreen(self) ->  int: ...
    def GetMaskRed(self) ->  int: ...
    def GetOption(self, name: wx._WxNameType) ->  wx._WxNameType: ...

    def GetOptionInt(self, name: wx._WxNameType) -> int: ...
    # Gets a user-defined integer-valued option.
    #
    # The function is case-insensitive to name. If the given option is not present, the function returns 0. Use HasOption if 0 is a possibly valid value for the option.
    #
    # Generic options:
    #
    # IMAGE_OPTION_MAX_WIDTH and IMAGE_OPTION_MAX_HEIGHT: If either of these options is specified, the loaded image will be scaled down(preserving its aspect ratio) so that its width is less than the max width given if it is not 0 and its height is less than the max height given if it is not 0. This is typically used for loading thumbnails and the advantage of using these options compared to calling Rescale after loading is that some handlers (only JPEG one right now) support rescaling the image during loading which is vastly more efficient than loading the entire huge image and rescaling it later (if these options are not supported by the handler, this is still what happens however). These options must be set before calling LoadFile to have any effect.
    # IMAGE_OPTION_ORIGINAL_WIDTH and IMAGE_OPTION_ORIGINAL_HEIGHT: These options will return the original size of the image if either IMAGE_OPTION_MAX_WIDTH or IMAGE_OPTION_MAX_HEIGHT is specified.
    #
    # New in version 2.9.3.
    #
    # IMAGE_OPTION_QUALITY: JPEG quality used when saving. This is an integer in 0..100 range with 0 meaning very poor and 100 excellent(but very badly compressed). This option is currently ignored for the other formats.
    # IMAGE_OPTION_RESOLUTIONUNIT: The value of this option determines whether the resolution of the image is specified in centimetres or inches, see ImageResolution enum elements.
    # IMAGE_OPTION_RESOLUTION , IMAGE_OPTION_RESOLUTIONX and IMAGE_OPTION_RESOLUTIONY: These options define the resolution of the image in the units corresponding to IMAGE_OPTION_RESOLUTIONUNIT options value. The first option can be set before saving the image to set both horizontal and vertical resolution to the same value. The X and Y options are set by the image handlers if they support the image resolution(currently BMP, JPEG and TIFF handlers do) and the image provides the resolution information and can be queried after loading the image.
    #
    # Options specific to wx.PNGHandler:
    #
    # IMAGE_OPTION_PNG_FORMAT: Format for saving a PNG file, see ImagePNGType for the supported values.
    # IMAGE_OPTION_PNG_BITDEPTH: Bit depth for every channel(R/G/B/A).
    #     IMAGE_OPTION_PNG_FILTER: Filter for saving a PNG file, see libpng(http://www.libpng.org/pub/png/libpng-1.2.5-manual.html) for possible values (e.g. PNG_FILTER_NONE, PNG_FILTER_SUB, PNG_FILTER_UP, etc).
    #     IMAGE_OPTION_PNG_COMPRESSION_LEVEL: Compression level(0..9) for saving a PNG file. An high value creates smaller-but-slower PNG file. Note that unlike other formats (e.g. JPEG) the PNG format is always lossless and thus this compression level doesn’t tradeoff the image quality.
    # IMAGE_OPTION_PNG_COMPRESSION_MEM_LEVEL: Compression memory usage level(1..9) for saving a PNG file. An high value means the saving process consumes more memory, but may create smaller PNG file.
    # IMAGE_OPTION_PNG_COMPRESSION_STRATEGY: Possible values are 0 for default strategy, 1 for filter, and 2 for Huffman-only. You can use OptiPNG(http://optipng.sourceforge.net/) to get a suitable value for your application.
    #     IMAGE_OPTION_PNG_COMPRESSION_BUFFER_SIZE: Internal buffer size(in bytes) for saving a PNG file. Ideally this should be as big as the resulting PNG file. Use this option if your application produces images with small size variation.
    #
    # Options specific to wx.TIFFHandler:
    #
    # IMAGE_OPTION_TIFF_BITSPERSAMPLE: Number of bits per sample(channel). Currently values of 1 and 8 are supported. A value of 1 results in a black and white image. A value of 8 (the default) can mean greyscale or RGB, depending on the value of IMAGE_OPTION_TIFF_SAMPLESPERPIXEL .
    # IMAGE_OPTION_TIFF_SAMPLESPERPIXEL: Number of samples(channels) per pixel. Currently values of 1 and 3 are supported. A value of 1 results in either a greyscale (by default) or black and white image, depending on the value of IMAGE_OPTION_TIFF_BITSPERSAMPLE . A value of 3 (the default) will result in an RGB image.
    # IMAGE_OPTION_TIFF_COMPRESSION: Compression type. By default it is set to 1(COMPRESSION_NONE). Typical other values are 5 (COMPRESSION_LZW) and 7 (COMPRESSION_JPEG). See tiff.h for more options.
    #     IMAGE_OPTION_TIFF_PHOTOMETRIC: Specifies the photometric interpretation. By default it is set to 2(PHOTOMETRIC_RGB) for RGB images and 0 (PHOTOMETRIC_MINISWHITE) for greyscale or black and white images. It can also be set to 1 (PHOTOMETRIC_MINISBLACK) to treat the lowest value as black and highest as white. If you want a greyscale image it is also sufficient to only specify IMAGE_OPTION_TIFF_PHOTOMETRIC and set it to either PHOTOMETRIC_MINISWHITE or PHOTOMETRIC_MINISBLACK. The other values are taken care of.
    #
    #  name(wx._WxNameType)  The name of the option, case-insensitive.
    #  ->  int
    # Returns: The value of the option or 0 if not found. Use HasOption if 0 can be a valid option value.
    #
    # Note
    #
    # Be careful when combining the options IMAGE_OPTION_TIFF_SAMPLESPERPIXEL , IMAGE_OPTION_TIFF_BITSPERSAMPLE , and IMAGE_OPTION_TIFF_PHOTOMETRIC . While some measures are taken to prevent illegal combinations and/or values, it is still easy to abuse them and come up with invalid results in the form of either corrupted images or crashes.
    #
    # See also
    #
    # SetOption , GetOption


    def GetOrFindMaskColour(self) -> Tuple[int, int, int]: ...


    def GetPalette(self) -> wx.Palette: ...


    def GetRed(self, x: int, y: int) -> int: ...

    def GetSize(self) ->  wx.Size: ...

    def GetSubImage(self, rect: wx.Rect) ->  Image: ...


    def GetType(self) ->  wx.BitmapType: ...


    def GetWidth(self) ->  int: ...

    @staticmethod
    def HSVtoRGB(hsv: wx.HSVValue) ->  wx.RGBValue: ...


    def HasAlpha(self) ->  bool: ...


    def HasMask(self) ->  bool: ...


    def HasOption(self, name: wx._WxNameType) ->  bool: ...


    def InitAlpha(self) -> wx.Unknown: ...

    # @staticmethod
    # InitStandardHandlers()
    #
    # Internal use only.

    @staticmethod
    def InsertHandler(handler: wx.ImageHandler) -> wx.Unknown: ...
    def IsOk(self) ->  bool: ...
    def IsTransparent(self, x: int, y: int, threshold: int = wx.IMAGE_ALPHA_THRESHOLD) -> bool: ...
    def LoadFile(self, stream: wx.InputStream, type: wx.BitmapType = wx.BITMAP_TYPE_ANY, index: int = -1) -> bool: ...
    # type (BitmapType)  May be one of the following:
    #
    # wx.BITMAP_TYPE_BMP: Load a Windows bitmap file.
    # wx.BITMAP_TYPE_GIF: Load a GIF bitmap file.
    # wx.BITMAP_TYPE_JPEG: Load a JPEG bitmap file.
    # wx.BITMAP_TYPE_PNG: Load a PNG bitmap file.
    # wx.BITMAP_TYPE_PCX: Load a PCX bitmap file.
    # wx.BITMAP_TYPE_PNM: Load a PNM bitmap file.
    # wx.BITMAP_TYPE_TIFF: Load a TIFF bitmap file.
    # wx.BITMAP_TYPE_TGA: Load a TGA bitmap file.
    # wx.BITMAP_TYPE_XPM: Load a XPM bitmap file.
    # wx.BITMAP_TYPE_ICO: Load a Windows icon file(ICO).
    # wx.BITMAP_TYPE_CUR: Load a Windows cursor file(CUR).
    # wx.BITMAP_TYPE_ANI: Load a Windows animated cursor file(ANI).
    # wx.BITMAP_TYPE_ANY: Will try to autodetect the format.

    @overload
    def LoadFile(self,  name: wx._WxNameType, type: wx.BitmapType = wx.BITMAP_TYPE_ANY, index: int = -1) -> bool: ...
    @overload
    def LoadFile(self, name: wx._WxNameType, mimetype: wx._WxNameType, index: int = -1) -> bool: ...
    @overload
    def LoadFile(self, stream: wx.InputStream, mimetype: wx._WxNameType, index: int = -1) -> bool: ...


    def Mirror(self, horizontally: bool = True) ->  Image: ...
    def Paste(self, image: Image, x: int, y: int) -> wx.Unknown: ...
    @staticmethod
    def RGBtoHSV(rgb: wx.RGBValue) -> wx.HSVValue: ...
    @staticmethod
    def RemoveHandler(name: wx._WxNameType) -> bool: ...
    def Replace(self, r1: int, g1: int, b1: int, r2: int, g2: int, b2: int) -> wx.Unknown: ...
    def Rescale(self, width: int, height: int, quality: ImageResizeQuality = IMAGE_QUALITY_NORMAL) -> Image: ...
    def Resize(self, size: wx.Size, pos: wx.Point, red: int = -1, green: int = -1, blue: int = -1) -> Image: ...
    def Rotate(self, angle: float, rotationCentre: wx.Point, interpolating: bool = True, offsetAfterRotation: Optional[wx.Point] = None) -> Image: ...
    def Rotate180(self) ->  Image: ...
    def Rotate90(self, clockwise: bool) ->  Image: ...
    def RotateHue(self, angle: float) -> wx.Unknown: ...

    def SaveFile(self, stream: wx.OutputStream, mimetype: wx._WxNameType) -> bool: ...
    def SaveFile(self, name: wx._WxNameType, type: wx.BitmapType) -> bool: ...
    # type(BitmapType)  Currently these types can be used:
    #
    # wx.BITMAP_TYPE_BMP: Save a BMP image file.
    # wx.BITMAP_TYPE_JPEG: Save a JPEG image file.
    # wx.BITMAP_TYPE_PNG: Save a PNG image file.
    # wx.BITMAP_TYPE_PCX: Save a PCX image file(tries to save as 8-bit if possible, falls back to 24-bit otherwise).
    # wx.BITMAP_TYPE_PNM: Save a PNM image file(as raw RGB always).
    # wx.BITMAP_TYPE_TIFF: Save a TIFF image file.
    # wx.BITMAP_TYPE_XPM: Save a XPM image file.
    # wx.BITMAP_TYPE_ICO: Save a Windows icon file(ICO). The size may be up to 255 wide by 127 high. A single image is saved in 8 colors at the size supplied.
    # wx.BITMAP_TYPE_CUR: Save a Windows cursor file(CUR).
    def SaveFile(self, name: wx._WxNameType, mimetype: wx._WxNameType) -> bool: ...
    def SaveFile(self, name: wx._WxNameType) ->  bool: ...
    def SaveFile(self, stream: wx.OutputStream, type: wx.BitmapType) -> bool: ...

    def Scale(self, width: int, height: int, quality: ImageResizeQuality = IMAGE_QUALITY_NORMAL) -> Image: ...
    def SetAlpha(self, x: int, y: int, alpha: int) -> wx.Unknown: ...
    def SetAlpha(self, alpha: Union[Any, None]) -> wx.Unknown: ...
    def SetAlphaBuffer(self, alpha) -> wx.Unknown: ...

    def SetData(self, data) -> wx.Unknown: ...
    def SetData(self, data, new_width, new_height) -> wx.Unknown: ...

    def SetDataBuffer(self, data) -> wx.Unknown: ...
    def SetDataBuffer(self, data, new_width, new_height) -> wx.Unknown: ...


    def SetMask(self, hasMask: bool = True) -> wx.Unknown: ...
    def SetMaskColour(self, red: int, green: int, blue: int) -> wx.Unknown: ...
    def SetMaskFromImage(self, mask: Image, mr: int, mg: int, mb: int) -> bool: ...

    def SetOption(self, name: wx._WxNameType, value: wx._WxNameType) -> wx.Unknown: ...
    def SetOption(self, name: wx._WxNameType, value: int) -> wx.Unknown: ...

    def SetPalette(self, palette: wx.Palette) -> wx.Unknown: ...


    def SetRGB(self, x: int, y: int, r: int, g: int, b: int) -> wx.Unknown: ...
    def SetRGB(self, rect: wx.Rect, red: int, green: int, blue: int) -> wx.Unknown: ...

    def SetType(self, type: wx.BitmapType) -> wx.Unknown: ...
    # type(BitmapType)  One of bitmap type constants, BITMAP_TYPE_INVALID is a valid value for it and can be used to reset the bitmap type to default but BITMAP_TYPE_MAX is not allowed here.

    def Size(self, size: wx.Size, pos: wx.Point, red: int, green: int, blue: int) -> Image: ...
    def __bool__(self) ->  int: ...
    def __nonzero__(self) ->  int: ...


    Height: int
    MaskBlue: int
    MaskGreen: int
    MaskRed: int
    Type: wx.BitmapType
    Width: int
