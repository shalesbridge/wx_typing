# Based on wxPython 4.0.4, Python3
#
# See https://github.com/python/typeshed/blob/master/CONTRIBUTING.md#stub-file-coding-style
# for style guidelines.


from enum import IntEnum
from typing import Any, NewType, Union

# TODO: These are just temporary, quick & dirty punts to get things working.
# import sip
# FontEncoding = sip.enumtype

from wx._punts import (_WxNameType as _WxNameType, _WxPyObjectType as _WxPyObjectType)

from wx._sip_enum import (_WxSipEnum as _WxSipEnum)


# The PolygonFillMode sip.enumtype
ODDEVEN_RULE: int = ...
WINDING_RULE: int = ...

class Orientation(_WxSipEnum): ...
HORIZONTAL: Orientation
VERTICAL: Orientation
BOTH: Orientation
ORIENTATION_MASK: Orientation

class BitmapType(_WxSipEnum):
    ...
BITMAP_TYPE_INVALID: BitmapType
BITMAP_TYPE_BMP: BitmapType
BITMAP_TYPE_ICO: BitmapType
BITMAP_TYPE_CUR: BitmapType
BITMAP_TYPE_XBM: BitmapType
BITMAP_TYPE_XBM_DATA: BitmapType
BITMAP_TYPE_XPM: BitmapType
BITMAP_TYPE_XPM_DATA: BitmapType
BITMAP_TYPE_TIFF: BitmapType
BITMAP_TYPE_TIF: BitmapType
BITMAP_TYPE_GIF: BitmapType
BITMAP_TYPE_PNG: BitmapType
BITMAP_TYPE_JPEG: BitmapType
BITMAP_TYPE_PNM: BitmapType
BITMAP_TYPE_PCX: BitmapType
BITMAP_TYPE_PICT: BitmapType
BITMAP_TYPE_ICON: BitmapType
BITMAP_TYPE_ANI: BitmapType
BITMAP_TYPE_IFF: BitmapType
BITMAP_TYPE_TGA: BitmapType
BITMAP_TYPE_MACCURSOR: BitmapType
BITMAP_TYPE_ANY: BitmapType

class BitmapBufferFormat(_WxSipEnum):
    ...
BitmapBufferFormat_RGB: BitmapBufferFormat
BitmapBufferFormat_RGBA: BitmapBufferFormat
BitmapBufferFormat_RGB32: BitmapBufferFormat
BitmapBufferFormat_ARGB32: BitmapBufferFormat

class _FakeEnum(int):
    """Fake class to act as a stand-in for sip.enumtype .

    Since sip.enumtype seems to represent an enum in C, and is interchangeable
    with ints, we'll declare it as a subclass of Python's standard int type.

    """
    ...
class FontEncoding(_FakeEnum): ...
class FontFamily(_FakeEnum): ... # ... is actually another sip.enumeration
class FontInfo(_FakeEnum): ...
class FontStyle(_FakeEnum): ...
class FontSymbolicSize(_FakeEnum): ...
class FontWeight(_FakeEnum): ...


from wx._object import Object as Object
from wx._trackable import Trackable
# import wx._colour
# Colour = wx._colour.Colour
# import wx._font
# Font = wx._font.Font
# import wx._evthandler
# EvtHandler = wx._evthandler.EvtHandler
# import wx._eventfilter
# EventFilter = wx._eventfilter.EventFilter
# import wx._event
# Event = wx._event.Event
# import wx._eventtype
# EventType = wx._eventtype.EventType

# For some bizarre reason, doing "from foo import bar as bar" seems to sidestep
# problems that occur when doing just "from foo import bar"; notably
# DataViewItemAttr would complain about not finding wx.Colour.
from wx._size import (Size as Size, DefaultSize as DefaultSize)
from wx._rect import (Rect as Rect)
from wx._nativefontinfo import NativeFontInfo as NativeFontInfo
from wx._colour import Colour as Colour
from wx._gdiobject import GDIObject as GDIObject
from wx._region import (Region as Region)
from wx._font import Font as Font
from wx._evthandler import EvtHandler as EvtHandler
from wx._eventfilter import EventFilter as EventFilter
from wx._event import Event as Event
from wx._eventtype import EventType as EventType

from wx._app import AppConsole, PyApp, App


wxEVT_NULL: EventType = ...

ALPHA_OPAQUE: int = ...


C2S_NAME: int = ...
C2S_CSS_SYNTAX: int = ...

FONTENCODING_SYSTEM: FontEncoding = ...
FONTENCODING_DEFAULT: FontEncoding = ...
FONTENCODING_ISO8859_1: FontEncoding = ...
FONTENCODING_ISO8859_2: FontEncoding = ...
FONTENCODING_ISO8859_3: FontEncoding = ...
FONTENCODING_ISO8859_4: FontEncoding = ...
FONTENCODING_ISO8859_5: FontEncoding = ...
FONTENCODING_ISO8859_6: FontEncoding = ...
FONTENCODING_ISO8859_7: FontEncoding = ...
FONTENCODING_ISO8859_8: FontEncoding = ...
FONTENCODING_ISO8859_9: FontEncoding = ...
FONTENCODING_ISO8859_10: FontEncoding = ...
FONTENCODING_ISO8859_11: FontEncoding = ...
FONTENCODING_ISO8859_12: FontEncoding = ...
FONTENCODING_ISO8859_13: FontEncoding = ...
FONTENCODING_ISO8859_14: FontEncoding = ...
FONTENCODING_ISO8859_15: FontEncoding = ...
FONTENCODING_ISO8859_MA: FontEncoding = ...
FONTENCODING_KOI8: FontEncoding = ...
FONTENCODING_KOI8_U: FontEncoding = ...
FONTENCODING_ALTERNATIVE: FontEncoding = ...
FONTENCODING_BULGARIAN: FontEncoding = ...
FONTENCODING_CP437: FontEncoding = ...
FONTENCODING_CP850: FontEncoding = ...
FONTENCODING_CP852: FontEncoding = ...
FONTENCODING_CP855: FontEncoding = ...
FONTENCODING_CP866: FontEncoding = ...
FONTENCODING_CP874: FontEncoding = ...
FONTENCODING_CP932: FontEncoding = ...
FONTENCODING_CP936: FontEncoding = ...
FONTENCODING_CP949: FontEncoding = ...
FONTENCODING_CP950: FontEncoding = ...
FONTENCODING_CP1250: FontEncoding = ...
FONTENCODING_CP1251: FontEncoding = ...
FONTENCODING_CP1252: FontEncoding = ...
FONTENCODING_CP1253: FontEncoding = ...
FONTENCODING_CP1254: FontEncoding = ...
FONTENCODING_CP1255: FontEncoding = ...
FONTENCODING_CP1256: FontEncoding = ...
FONTENCODING_CP1257: FontEncoding = ...
FONTENCODING_CP1258: FontEncoding = ...
FONTENCODING_CP1361: FontEncoding = ...
FONTENCODING_CP12_MA: FontEncoding = ...
FONTENCODING_UTF7: FontEncoding = ...
FONTENCODING_UTF8: FontEncoding = ...
FONTENCODING_EUC_JP: FontEncoding = ...
FONTENCODING_UTF16BE: FontEncoding = ...
FONTENCODING_UTF16LE: FontEncoding = ...
FONTENCODING_UTF32BE: FontEncoding = ...
FONTENCODING_UTF32L: FontEncoding = ...
FONTENCODING_MACROMAN: FontEncoding = ...
FONTENCODING_MACJAPANES: FontEncoding = ...
FONTENCODING_MACCHINESETRA: FontEncoding = ...
FONTENCODING_MACKOREA: FontEncoding = ...
FONTENCODING_MACARABI: FontEncoding = ...
FONTENCODING_MACHEBRE: FontEncoding = ...
FONTENCODING_MACGREE: FontEncoding = ...
FONTENCODING_MACCYRILLI: FontEncoding = ...
FONTENCODING_MACDEVANAGAR: FontEncoding = ...
FONTENCODING_MACGURMUKH: FontEncoding = ...
FONTENCODING_MACGUJARAT: FontEncoding = ...
FONTENCODING_MACORIY: FontEncoding = ...
FONTENCODING_MACBENGAL: FontEncoding = ...
FONTENCODING_MACTAMI: FontEncoding = ...
FONTENCODING_MACTELUG: FontEncoding = ...
FONTENCODING_MACKANNAD: FontEncoding = ...
FONTENCODING_MACMALAJALA: FontEncoding = ...
FONTENCODING_MACSINHALES: FontEncoding = ...
FONTENCODING_MACBURMES: FontEncoding = ...
FONTENCODING_MACKHME: FontEncoding = ...
FONTENCODING_MACTHA: FontEncoding = ...
FONTENCODING_MACLAOTIA: FontEncoding = ...
FONTENCODING_MACGEORGIA: FontEncoding = ...
FONTENCODING_MACARMENIA: FontEncoding = ...
FONTENCODING_MACCHINESESIM: FontEncoding = ...
FONTENCODING_MACTIBETA: FontEncoding = ...
FONTENCODING_MACMONGOLIA: FontEncoding = ...
FONTENCODING_MACETHIOPI: FontEncoding = ...
FONTENCODING_MACCENTRALEU: FontEncoding = ...
FONTENCODING_MACVIATNAMES: FontEncoding = ...
FONTENCODING_MACARABICEX: FontEncoding = ...
FONTENCODING_MACSYMBO: FontEncoding = ...
FONTENCODING_MACDINGBAT: FontEncoding = ...
FONTENCODING_MACTURKIS: FontEncoding = ...
FONTENCODING_MACCROATIA: FontEncoding = ...
FONTENCODING_MACICELANDI: FontEncoding = ...
FONTENCODING_MACROMANIA: FontEncoding = ...
FONTENCODING_MACCELTI: FontEncoding = ...
FONTENCODING_MACGAELI: FontEncoding = ...
FONTENCODING_MACKEYBOAR: FontEncoding = ...
FONTENCODING_ISO2022_JP: FontEncoding = ...
FONTENCODING_MAX: FontEncoding = ...
FONTENCODING_MACMI: FontEncoding = ...
FONTENCODING_MACMA: FontEncoding = ...
FONTENCODING_UTF16: FontEncoding = ...
FONTENCODING_UTF32: FontEncoding = ...
FONTENCODING_UNICODE: FontEncoding = ...
FONTENCODING_GB2312: FontEncoding = ...
FONTENCODING_BIG5: FontEncoding = ...
FONTENCODING_SHIFT_JIS: FontEncoding = ...
FONTENCODING_EUC_KR: FontEncoding = ...
FONTENCODING_JOHAB: FontEncoding = ...
FONTENCODING_VIETNAMES: FontEncoding = ...


# ... yet another sip.enumeration
class FontFlag(IntEnum):
    FONTFLAG_DEFAULT = ...
    FONTFLAG_ITALIC = ...
    FONTFLAG_SLANT = ...
    FONTFLAG_LIGHT = ...
    FONTFLAG_BOLD = ...
    FONTFLAG_ANTIALIASED = ...
    FONTFLAG_NOT_ANTIALIASED = ...
    FONTFLAG_UNDERLINED = ...
    FONTFLAG_STRIKETHROUGH = ...
    FONTFLAG_MASK = ...

FONTFLAG_DEFAULT = FontFlag.FONTFLAG_DEFAULT
FONTFLAG_ITALIC = FontFlag.FONTFLAG_ITALIC
FONTFLAG_SLANT = FontFlag.FONTFLAG_SLANT
FONTFLAG_LIGHT = FontFlag.FONTFLAG_LIGHT
FONTFLAG_BOLD = FontFlag.FONTFLAG_BOLD
FONTFLAG_ANTIALIASED = FontFlag.FONTFLAG_ANTIALIASED
FONTFLAG_NOT_ANTIALIASED = FontFlag.FONTFLAG_NOT_ANTIALIASED
FONTFLAG_UNDERLINED = FontFlag.FONTFLAG_UNDERLINED
FONTFLAG_STRIKETHROUGH = FontFlag.FONTFLAG_STRIKETHROUGH
FONTFLAG_MASK = FontFlag.FONTFLAG_MASK

# Actually another sip.enumtype
class ImageResizeQuality(IntEnum):
    IMAGE_QUALITY_NEAREST = ...
    IMAGE_QUALITY_BILINEAR = ...
    IMAGE_QUALITY_BICUBIC = ...
    IMAGE_QUALITY_BOX_AVERAGE = ...
    IMAGE_QUALITY_NORMAL = ...
    IMAGE_QUALITY_HIGH = ...

IMAGE_QUALITY_NEAREST = ImageResizeQuality.IMAGE_QUALITY_NEAREST
IMAGE_QUALITY_BILINEAR = ImageResizeQuality.IMAGE_QUALITY_BILINEAR
IMAGE_QUALITY_BICUBIC = ImageResizeQuality.IMAGE_QUALITY_BICUBIC
IMAGE_QUALITY_BOX_AVERAGE = ImageResizeQuality.IMAGE_QUALITY_BOX_AVERAGE
IMAGE_QUALITY_NORMAL = ImageResizeQuality.IMAGE_QUALITY_NORMAL
IMAGE_QUALITY_HIGH = ImageResizeQuality.IMAGE_QUALITY_HIGH

Unknown = Any

# There is a "wx.int" type in the wxpython docs, so we declare it here ...or at least, we would if Python didn't throw an "invalid type: wx.int" error message when we do.
# int = int
IntPtr = NewType('IntPtr', int)

class RefCounter:
    def __init__(self) -> None: ...
    def DecRef(self) -> None: ...
    def GetRefCount(self) -> int: ...
    def IncRef(self) -> None: ...
    # ~wxRefCounter(self) -> None: ...
    RefCount: int
    ...

# NOTE: wx.WindowID is mentioned in the wxPython API docs, but does not seem to be defined anywhere.
WindowID = NewType('WindowID', int)
ID_ANY: WindowID = WindowID(-1)




# wx.Window relies on wx.WindowID; not sure if defining wx.WindowId before importing is important.
from wx._realpoint import RealPoint as RealPoint
from wx._point import (Point as Point, DefaultPosition as DefaultPosition)
from wx._image import Image as Image
from wx._bitmap import Bitmap as Bitmap
from wx._iconlocation import IconLocation as IconLocation
from wx._icon import Icon as Icon
from wx._windowbase import WindowBase as WindowBase
from wx._window import (Window as Window, PanelNameStr as PanelNameStr)
from wx._panel import (Panel as Panel)
from wx._region import (Region as Region)
