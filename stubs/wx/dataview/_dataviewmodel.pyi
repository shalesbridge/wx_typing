from typing import Any, Text
DVCVariant = Any

import wx
import wx.dataview

class DataViewModel(wx.RefCounter):

    def AddNotifier(self, notifier: wx.dataview.DataViewModelNotifier) -> wx.Unknown:
        ...

    def ChangeValue(self, variant: DVCVariant, item: wx.dataview.DataViewItem, col: int) -> bool: ...

    def Cleared(self) -> bool: ...

    def Compare(self, item1: wx.dataview.DataViewItem, item2: wx.dataview.DataViewItem, column: int, ascending: bool) -> int: ...

    def GetAttr(self, item: wx.dataview.DataViewItem, col: int, attr: wx.dataview.DataViewItemAttr) -> bool: ...

    def GetChildren(self, item: wx.dataview.DataViewItem, children: wx.dataview.DataViewItemArray) -> int: ...

    def GetColumnCount(self) -> int: ...

    def GetColumnType(self, col: int) -> Text: ...

    def GetParent(self, item: wx.dataview.DataViewItem) -> wx.dataview.DataViewItem: ...

    def GetValue(self, item: wx.dataview.DataViewItem, col: int) -> Any: ...

    def HasContainerColumns(self, item: wx.dataview.DataViewItem) -> bool: ...

    def HasDefaultCompare(self) -> bool: ...

    def HasValue(self, item: wx.dataview.DataViewItem, col: int) -> bool: ...

    def IsContainer(self, item: wx.dataview.DataViewItem) -> bool: ...

    def IsEnabled(self, item: wx.dataview.DataViewItem, col: int) -> bool: ...

    def IsListModel(self) -> bool: ...

    def IsVirtualListModel(self) -> bool: ...

    def ItemAdded(self, parent: wx.dataview.DataViewItem, item: wx.dataview.DataViewItem) -> bool: ...

    def ItemChanged(self, item: wx.dataview.DataViewItem) -> bool: ...

    def ItemDeleted(self, parent: wx.dataview.DataViewItem, item: wx.dataview.DataViewItem) -> bool: ...

    def ItemsAdded(self, parent: wx.dataview.DataViewItem, items: wx.dataview.DataViewItemArray) -> bool: ...

    def ItemsChanged(self, items: wx.dataview.DataViewItemArray) -> bool: ...

    def ItemsDeleted(self, parent: wx.dataview.DataViewItem, items: wx.dataview.DataViewItemArray) -> bool: ...

    def RemoveNotifier(self, notifier: wx.dataview.DataViewModelNotifier) -> wx.Unknown: ...

    def Resort(self) -> wx.Unknown: ...

    def SetValue(self, variant: DVCVariant, item: wx.dataview.DataViewItem, col: int) ->  bool: ...

    def ValueChanged(self, item: wx.dataview.DataViewItem, col: int) -> bool: ...

    # ~wxDataViewModel(self) #
    #     Destructor.
    #
    #     This should not be called directly. Use DecRef instead.

    ColumnCount: int
